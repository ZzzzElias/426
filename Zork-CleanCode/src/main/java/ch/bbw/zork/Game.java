package ch.bbw.zork;import java.util.ArrayList;import java.util.HashSet;import java.util.Stack;public class Game {    private final Parser parser;    private Room currentRoom;    private final Room outside;    private final Room lab;    private final Room tavern;    private final Room gblock;    private final Room office;    private final Item hammer;    private final Item key;    private final ArrayList<Room> map;    private final HashSet<Item> backpack;    private final Stack<Room> previousRooms;    public Game() {        parser = new Parser(System.in);        // Create all the rooms and link their exits together.        outside = new Room("outside G block on Peninsula campus");        lab = new Room("lab, a lecture theatre in A block");        tavern = new Room("the Seahorse Tavern (the campus pub)");        gblock = new Room("the G Block");        office = new Room("the computing admin office");        // initialise room exits        outside.put(null, lab, gblock, tavern);        lab.put(null, null, null, outside);        tavern.put(null, outside, null, null);        gblock.put(outside, office, null, null);        office.put(null, null, null, gblock);        currentRoom = outside; // start game outside        previousRooms = new Stack<>();        map = new ArrayList<>();        map.add(outside);        map.add(lab);        map.add(tavern);        map.add(gblock);        map.add(office);        hammer = new Item();        hammer.setName("Hammer");        hammer.setWeight(1);        key = new Item();        key.setName("Key");        key.setWeight(0);  // TODO: Weight in item as float        lab.add(hammer);        lab.add(key);        backpack = new HashSet<>();    }    public void play() {        printWelcome();        // Enter the main command loop.  Here we repeatedly read commands and        // execute them until the game is over.        boolean finished = false;        while (!finished) {            Command command = parser.get(); // reads a command            finished = processCommand(command);        }        System.out.println("Thank you for playing.  Good bye.");    }    private void printWelcome() {        System.out.println();        System.out.println("Welcome to Zork!");        System.out.println("Zork is a simple adventure game.");        System.out.println("Type 'help' if you need help.");        System.out.println();        System.out.println(currentRoom.longDescription());    }    private boolean processCommand(Command command) {        String commandWord = command.getCommandWord();        if (command.isUnknown()) {            System.out.println("I don't know what you mean...");            return false;        }        if (commandWord.equals("help")) {            printHelp();        } else if (commandWord.equals("go")) {            goRoom(command);            // Gewonnen?            if (currentRoom == tavern) {                System.out.println("Sie sind in der Taverne und haben gewonnen!");                return true;            }        } else if (commandWord.equals("map")) {            System.out.println("Map (all rooms)");            System.out.println("---------------");            for (Room room : map) {                System.out.print("- ");                if (room == currentRoom) {                    System.out.print(">>> ");                }                System.out.println(room.shortDescription());            }        } else if (commandWord.equals("get")) {            if (command.hasSecondWord()) {                Item item = currentRoom.getItem(command.getSecondWord());                backpack.add(item);            }        } else if (commandWord.equals("put")) {            Item itemToPut = null;            for (Item item : backpack) {                if (item.getName().equals(command.getSecondWord())) {                    itemToPut = item;                    break;                }            }            if (itemToPut != null) {                currentRoom.add(itemToPut);                backpack.remove(itemToPut);            }        } else if (commandWord.equals("show")) {            System.out.println("Backpack content");            System.out.println("----------------");            for (Item item : backpack)                System.out.println("- " + item.getName());        } else if (commandWord.equals("back")) {            if (!previousRooms.isEmpty()) {                currentRoom = previousRooms.pop();                System.out.println(currentRoom.longDescription());            } else                System.out.println("Don't know where to go :(");        } else if (commandWord.equals("quit")) {            if (command.hasSecondWord())                System.out.println("Quit what?");            else                return true; // signal that we want to quit        }        return false;    }    /* implementations of user commands:     */    private void printHelp() {        System.out.println("You are lost. You are alone. You wander");        System.out.println("around at Monash Uni, Peninsula Campus.");        System.out.println();        System.out.println("Your command words are:");        System.out.println(parser.showCommands());    }    private void goRoom(Command command) {        // if there is no second word, we don't know where to go...        if (!command.hasSecondWord()) {            System.out.println("Go where?");        } else {            String direction = command.getSecondWord();            // Try to leave current room.            Room nextRoom = currentRoom.nextRoom(direction);            if (nextRoom == null)                System.out.println("There is no door!");            else {                previousRooms.push(currentRoom);                currentRoom = nextRoom;                System.out.println(currentRoom.longDescription());            }        }    }}